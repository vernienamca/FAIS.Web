{"version":3,"file":"default-src_app_pages_ui_components_components-overview_components_components-overview-grid-l-5d058f.js","mappings":"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","sources":["./src/app/pages/ui/components/components-overview/components/components-overview-grid-list/components-overview-grid-list.component.ts","./src/app/pages/ui/components/components-overview/components/components-overview-grid-list/components-overview-grid-list.component.html","./src/app/pages/ui/components/components-overview/components/components-overview-grid-list/components-overview-grid-list.module.ts","./node_modules/@angular/material/fesm2022/grid-list.mjs"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'vex-components-overview-grid-list',\r\n  templateUrl: './components-overview-grid-list.component.html',\r\n  styleUrls: ['./components-overview-grid-list.component.scss']\r\n})\r\nexport class ComponentsOverviewGridListComponent implements OnInit {\r\n\r\n  tiles: any[] = [\r\n    { text: 'One', cols: 3, rows: 1, color: 'lightblue' },\r\n    { text: 'Two', cols: 1, rows: 2, color: 'lightgreen' },\r\n    { text: 'Three', cols: 1, rows: 1, color: 'lightpink' },\r\n    { text: 'Four', cols: 2, rows: 1, color: '#DDBDF1' },\r\n  ];\r\n\r\n  gridListHTML: string =\r\n    `<mat-grid-list cols=\"4\" rowHeight=\"100px\">\r\n  <mat-grid-tile *ngFor=\"let tile of tiles\" [colspan]=\"tile.cols\" [rowspan]=\"tile.rows\"\r\n                  [style.background]=\"tile.color\">\r\n      {{tile.text}}\r\n  </mat-grid-tile>\r\n</mat-grid-list>`;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n}\r\n","<div class=\"card flex flex-col sm:flex-row\">\r\n  <div class=\"p-6\">\r\n    <mat-grid-list class=\"w-64 max-w-full flex-1\" cols=\"4\" rowHeight=\"100px\">\r\n      <mat-grid-tile *ngFor=\"let tile of tiles\" [colspan]=\"tile.cols\" [rowspan]=\"tile.rows\"\r\n                     [style.background]=\"tile.color\">\r\n        {{ tile.text }}\r\n      </mat-grid-tile>\r\n    </mat-grid-list>\r\n  </div>\r\n\r\n  <div class=\"border-l flex-1\">\r\n    <div class=\"p-6\">\r\n      <h2 class=\"title mt-0 mb-4\">Grid List</h2>\r\n      <h4 class=\"body-2 text-secondary m-0\">&lt;mat-grid-list&gt;</h4>\r\n    </div>\r\n\r\n    <mat-tab-group>\r\n      <mat-tab label=\"DESCRIPTION\">\r\n        <p class=\"p-6\">\r\n          A grid list consists of a repeated pattern of cells arrayed in a vertical and horizontal layout.\r\n          <br>\r\n          <br>Grid lists are best used on similar data types. They help improve the visual comprehension of the content\r\n          they contain.\r\n        </p>\r\n      </mat-tab>\r\n      <mat-tab label=\"SOURCE CODE\">\r\n        <pre><code [vexHighlight]=\"gridListHTML\"></code></pre>\r\n      </mat-tab>\r\n    </mat-tab-group>\r\n  </div>\r\n</div>\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ComponentsOverviewGridListComponent } from './components-overview-grid-list.component';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { HighlightModule } from '../../../../../../../@vex/components/highlight/highlight.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [ComponentsOverviewGridListComponent],\r\n  imports: [\r\n    CommonModule,\r\n    MatGridListModule,\r\n    MatTabsModule,\r\n    HighlightModule\r\n  ],\r\n  exports: [ComponentsOverviewGridListComponent]\r\n})\r\nexport class ComponentsOverviewGridListModule {\r\n}\r\n","import * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { setLines, MatLine, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/bidi';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nclass TileCoordinator {\n    constructor() {\n        /** Index at which the search for the next gap will start. */\n        this.columnIndex = 0;\n        /** The current row index. */\n        this.rowIndex = 0;\n    }\n    /** Gets the total number of rows occupied by tiles */\n    get rowCount() {\n        return this.rowIndex + 1;\n    }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     */\n    get rowspan() {\n        const lastRowMax = Math.max(...this.tracker);\n        // if any of the tiles has a rowspan that pushes it beyond the total row count,\n        // add the difference to the rowcount\n        return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n    /**\n     * Updates the tile positions.\n     * @param numColumns Amount of columns in the grid.\n     * @param tiles Tiles to be positioned.\n     */\n    update(numColumns, tiles) {\n        this.columnIndex = 0;\n        this.rowIndex = 0;\n        this.tracker = new Array(numColumns);\n        this.tracker.fill(0, 0, this.tracker.length);\n        this.positions = tiles.map(tile => this._trackTile(tile));\n    }\n    /** Calculates the row and col position of a tile. */\n    _trackTile(tile) {\n        // Find a gap large enough for this tile.\n        const gapStartIndex = this._findMatchingGap(tile.colspan);\n        // Place tile in the resulting gap.\n        this._markTilePosition(gapStartIndex, tile);\n        // The next time we look for a gap, the search will start at columnIndex, which should be\n        // immediately after the tile that has just been placed.\n        this.columnIndex = gapStartIndex + tile.colspan;\n        return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /** Finds the next available space large enough to fit the tile. */\n    _findMatchingGap(tileCols) {\n        if (tileCols > this.tracker.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                `grid with cols=\"${this.tracker.length}\".`);\n        }\n        // Start index is inclusive, end index is exclusive.\n        let gapStartIndex = -1;\n        let gapEndIndex = -1;\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n        do {\n            // If we've reached the end of the row, go to the next row.\n            if (this.columnIndex + tileCols > this.tracker.length) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n            // If there are no more empty spaces in this row at all, move on to the next row.\n            if (gapStartIndex == -1) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\n            // If a gap large enough isn't found, we want to start looking immediately after the current\n            // gap on the next iteration.\n            this.columnIndex = gapStartIndex + 1;\n            // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n            // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n        } while (gapEndIndex - gapStartIndex < tileCols || gapEndIndex == 0);\n        // If we still didn't manage to find a gap, ensure that the index is\n        // at least zero so the tile doesn't get pulled out of the grid.\n        return Math.max(gapStartIndex, 0);\n    }\n    /** Move \"down\" to the next row. */\n    _nextRow() {\n        this.columnIndex = 0;\n        this.rowIndex++;\n        // Decrement all spaces by one to reflect moving down one row.\n        for (let i = 0; i < this.tracker.length; i++) {\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n        }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     */\n    _findGapEndIndex(gapStartIndex) {\n        for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n            if (this.tracker[i] != 0) {\n                return i;\n            }\n        }\n        // The gap ends with the end of the row.\n        return this.tracker.length;\n    }\n    /** Update the tile tracker to account for the given tile in the given space. */\n    _markTilePosition(start, tile) {\n        for (let i = 0; i < tile.colspan; i++) {\n            this.tracker[start + i] = tile.rowspan;\n        }\n    }\n}\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nclass TilePosition {\n    constructor(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n}\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n\nclass MatGridTile {\n    constructor(_element, _gridList) {\n        this._element = _element;\n        this._gridList = _gridList;\n        this._rowspan = 1;\n        this._colspan = 1;\n    }\n    /** Amount of rows that the grid tile takes up. */\n    get rowspan() {\n        return this._rowspan;\n    }\n    set rowspan(value) {\n        this._rowspan = Math.round(coerceNumberProperty(value));\n    }\n    /** Amount of columns that the grid tile takes up. */\n    get colspan() {\n        return this._colspan;\n    }\n    set colspan(value) {\n        this._colspan = Math.round(coerceNumberProperty(value));\n    }\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     */\n    _setStyle(property, value) {\n        this._element.nativeElement.style[property] = value;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatGridTile, deps: [{ token: i0.ElementRef }, { token: MAT_GRID_LIST, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatGridTile, selector: \"mat-grid-tile\", inputs: { rowspan: \"rowspan\", colspan: \"colspan\" }, host: { properties: { \"attr.rowspan\": \"rowspan\", \"attr.colspan\": \"colspan\" }, classAttribute: \"mat-grid-tile\" }, exportAs: [\"matGridTile\"], ngImport: i0, template: \"<div class=\\\"mat-grid-tile-content\\\">\\n  <ng-content></ng-content>\\n</div>\\n\", styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatGridTile, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-grid-tile', exportAs: 'matGridTile', host: {\n                        'class': 'mat-grid-tile',\n                        // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n                        // the DOM. This is needed for the grid-tile harness.\n                        '[attr.rowspan]': 'rowspan',\n                        '[attr.colspan]': 'colspan',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<div class=\\\"mat-grid-tile-content\\\">\\n  <ng-content></ng-content>\\n</div>\\n\", styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_GRID_LIST]\n                }] }]; }, propDecorators: { rowspan: [{\n                type: Input\n            }], colspan: [{\n                type: Input\n            }] } });\nclass MatGridTileText {\n    constructor(_element) {\n        this._element = _element;\n    }\n    ngAfterContentInit() {\n        setLines(this._lines, this._element);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatGridTileText, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatGridTileText, selector: \"mat-grid-tile-header, mat-grid-tile-footer\", queries: [{ propertyName: \"_lines\", predicate: MatLine, descendants: true }], ngImport: i0, template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\", changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatGridTileText, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-grid-tile-header, mat-grid-tile-footer', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { _lines: [{\n                type: ContentChildren,\n                args: [MatLine, { descendants: true }]\n            }] } });\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridAvatarCssMatStyler {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatGridAvatarCssMatStyler, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatGridAvatarCssMatStyler, selector: \"[mat-grid-avatar], [matGridAvatar]\", host: { classAttribute: \"mat-grid-avatar\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatGridAvatarCssMatStyler, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-grid-avatar], [matGridAvatar]',\n                    host: { 'class': 'mat-grid-avatar' },\n                }]\n        }] });\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatGridTileHeaderCssMatStyler, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatGridTileHeaderCssMatStyler, selector: \"mat-grid-tile-header\", host: { classAttribute: \"mat-grid-tile-header\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatGridTileHeaderCssMatStyler, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-grid-tile-header',\n                    host: { 'class': 'mat-grid-tile-header' },\n                }]\n        }] });\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatGridTileFooterCssMatStyler, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatGridTileFooterCssMatStyler, selector: \"mat-grid-tile-footer\", host: { classAttribute: \"mat-grid-tile-footer\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatGridTileFooterCssMatStyler, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-grid-tile-footer',\n                    host: { 'class': 'mat-grid-tile-footer' },\n                }]\n        }] });\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nclass TileStyler {\n    constructor() {\n        this._rows = 0;\n        this._rowspan = 0;\n    }\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param gutterSize Size of the grid's gutter.\n     * @param tracker Instance of the TileCoordinator.\n     * @param cols Amount of columns in the grid.\n     * @param direction Layout direction of the grid.\n     */\n    init(gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param offset Number of tiles that have already been rendered in the row/column.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @return Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param span The tile's rowspan or colspan.\n     * @return Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize, span) {\n        return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param tile Tile to which to apply the styling.\n     * @param rowIndex Index of the tile's row.\n     * @param colIndex Index of the tile's column.\n     */\n    setStyle(tile, rowIndex, colIndex) {\n        // Percent of the available horizontal space that one column takes up.\n        let percentWidthPerTile = 100 / this._cols;\n        // Fraction of the vertical gutter size that each column takes up.\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n        let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /** Sets the horizontal placement of the tile in the list. */\n    setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n        // Base horizontal size of a column.\n        let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        // The width and horizontal position of each tile is always calculated the same way, but the\n        // height and vertical position depends on the rowMode.\n        let side = this._direction === 'rtl' ? 'right' : 'left';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     */\n    getGutterSpan() {\n        return `${this._gutterSize} * (${this._rowspan} - 1)`;\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param tileHeight Height of the tile.\n     */\n    getTileSpan(tileHeight) {\n        return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * @docs-private\n     */\n    getComputedHeight() {\n        return null;\n    }\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nclass FixedTileStyler extends TileStyler {\n    constructor(fixedRowHeight) {\n        super();\n        this.fixedRowHeight = fixedRowHeight;\n    }\n    init(gutterSize, tracker, cols, direction) {\n        super.init(gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n        if (!cssCalcAllowedValue.test(this.fixedRowHeight) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n        }\n    }\n    setRowStyles(tile, rowIndex) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return ['height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)];\n    }\n    reset(list) {\n        list._setListStyle(['height', null]);\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nclass RatioTileStyler extends TileStyler {\n    constructor(value) {\n        super();\n        this._parseRatio(value);\n    }\n    setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n        let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use padding-top and margin-top to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return [\n            'paddingBottom',\n            calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`),\n        ];\n    }\n    reset(list) {\n        list._setListStyle(['paddingBottom', null]);\n        list._tiles.forEach(tile => {\n            tile._setStyle('marginTop', null);\n            tile._setStyle('paddingTop', null);\n        });\n    }\n    _parseRatio(value) {\n        const ratioParts = value.split(':');\n        if (ratioParts.length !== 2 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nclass FitTileStyler extends TileStyler {\n    setRowStyles(tile, rowIndex) {\n        // Percent of the available vertical space that one row takes up.\n        let percentHeightPerTile = 100 / this._rowspan;\n        // Fraction of the horizontal gutter size that each column takes up.\n        let gutterHeightPerTile = (this._rows - 1) / this._rows;\n        // Base vertical size of a column.\n        let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    reset(list) {\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/** Wraps a CSS string in a calc function */\nfunction calc(exp) {\n    return `calc(${exp})`;\n}\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value) {\n    return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n    constructor(_element, _dir) {\n        this._element = _element;\n        this._dir = _dir;\n        /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n        this._gutter = '1px';\n    }\n    /** Amount of columns in the grid list. */\n    get cols() {\n        return this._cols;\n    }\n    set cols(value) {\n        this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n    }\n    /** Size of the grid list's gutter in pixels. */\n    get gutterSize() {\n        return this._gutter;\n    }\n    set gutterSize(value) {\n        this._gutter = `${value == null ? '' : value}`;\n    }\n    /** Set internal representation of row height from the user-provided value. */\n    get rowHeight() {\n        return this._rowHeight;\n    }\n    set rowHeight(value) {\n        const newValue = `${value == null ? '' : value}`;\n        if (newValue !== this._rowHeight) {\n            this._rowHeight = newValue;\n            this._setTileStyler(this._rowHeight);\n        }\n    }\n    ngOnInit() {\n        this._checkCols();\n        this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     */\n    ngAfterContentChecked() {\n        this._layoutTiles();\n    }\n    /** Throw a friendly error if cols property is missing */\n    _checkCols() {\n        if (!this.cols && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: must pass in number of columns. ` + `Example: <mat-grid-list cols=\"3\">`);\n        }\n    }\n    /** Default to equal width:height if rowHeight property is missing */\n    _checkRowHeight() {\n        if (!this._rowHeight) {\n            this._setTileStyler('1:1');\n        }\n    }\n    /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n    _setTileStyler(rowHeight) {\n        if (this._tileStyler) {\n            this._tileStyler.reset(this);\n        }\n        if (rowHeight === MAT_FIT_MODE) {\n            this._tileStyler = new FitTileStyler();\n        }\n        else if (rowHeight && rowHeight.indexOf(':') > -1) {\n            this._tileStyler = new RatioTileStyler(rowHeight);\n        }\n        else {\n            this._tileStyler = new FixedTileStyler(rowHeight);\n        }\n    }\n    /** Computes and applies the size and position for all children grid tiles. */\n    _layoutTiles() {\n        if (!this._tileCoordinator) {\n            this._tileCoordinator = new TileCoordinator();\n        }\n        const tracker = this._tileCoordinator;\n        const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._tileCoordinator.update(this.cols, tiles);\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n        tiles.forEach((tile, index) => {\n            const pos = tracker.positions[index];\n            this._tileStyler.setStyle(tile, pos.row, pos.col);\n        });\n        this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /** Sets style on the main grid-list element, given the style name and value. */\n    _setListStyle(style) {\n        if (style) {\n            this._element.nativeElement.style[style[0]] = style[1];\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatGridList, deps: [{ token: i0.ElementRef }, { token: i1.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatGridList, selector: \"mat-grid-list\", inputs: { cols: \"cols\", gutterSize: \"gutterSize\", rowHeight: \"rowHeight\" }, host: { properties: { \"attr.cols\": \"cols\" }, classAttribute: \"mat-grid-list\" }, providers: [\n            {\n                provide: MAT_GRID_LIST,\n                useExisting: MatGridList,\n            },\n        ], queries: [{ propertyName: \"_tiles\", predicate: MatGridTile, descendants: true }], exportAs: [\"matGridList\"], ngImport: i0, template: \"<div>\\n  <ng-content></ng-content>\\n</div>\", styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatGridList, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-grid-list', exportAs: 'matGridList', host: {\n                        'class': 'mat-grid-list',\n                        // Ensures that the \"cols\" input value is reflected in the DOM. This is\n                        // needed for the grid-list harness.\n                        '[attr.cols]': 'cols',\n                    }, providers: [\n                        {\n                            provide: MAT_GRID_LIST,\n                            useExisting: MatGridList,\n                        },\n                    ], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<div>\\n  <ng-content></ng-content>\\n</div>\", styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.Directionality, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { _tiles: [{\n                type: ContentChildren,\n                args: [MatGridTile, { descendants: true }]\n            }], cols: [{\n                type: Input\n            }], gutterSize: [{\n                type: Input\n            }], rowHeight: [{\n                type: Input\n            }] } });\n\nclass MatGridListModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatGridListModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: MatGridListModule, declarations: [MatGridList,\n            MatGridTile,\n            MatGridTileText,\n            MatGridTileHeaderCssMatStyler,\n            MatGridTileFooterCssMatStyler,\n            MatGridAvatarCssMatStyler], imports: [MatLineModule, MatCommonModule], exports: [MatGridList,\n            MatGridTile,\n            MatGridTileText,\n            MatLineModule,\n            MatCommonModule,\n            MatGridTileHeaderCssMatStyler,\n            MatGridTileFooterCssMatStyler,\n            MatGridAvatarCssMatStyler] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatGridListModule, imports: [MatLineModule, MatCommonModule, MatLineModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatGridListModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatLineModule, MatCommonModule],\n                    exports: [\n                        MatGridList,\n                        MatGridTile,\n                        MatGridTileText,\n                        MatLineModule,\n                        MatCommonModule,\n                        MatGridTileHeaderCssMatStyler,\n                        MatGridTileFooterCssMatStyler,\n                        MatGridAvatarCssMatStyler,\n                    ],\n                    declarations: [\n                        MatGridList,\n                        MatGridTile,\n                        MatGridTileText,\n                        MatGridTileHeaderCssMatStyler,\n                        MatGridTileFooterCssMatStyler,\n                        MatGridAvatarCssMatStyler,\n                    ],\n                }]\n        }] });\n\n// Privately exported for the grid-list harness.\nconst ɵTileCoordinator = TileCoordinator;\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, ɵTileCoordinator };\n"],"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵstyleProp","tile_r1","color","ɵɵproperty","cols","rows","ɵɵadvance","ɵɵtextInterpolate1","text","ComponentsOverviewGridListComponent","constructor","tiles","gridListHTML","ngOnInit","selectors","decls","vars","consts","template","ComponentsOverviewGridListComponent_Template","rf","ctx","ɵɵtemplate","ComponentsOverviewGridListComponent_mat_grid_tile_3_Template","ɵɵelement","CommonModule","MatGridListModule","MatTabsModule","HighlightModule","ComponentsOverviewGridListModule","declarations","imports","exports","InjectionToken","Component","ViewEncapsulation","ChangeDetectionStrategy","Optional","Inject","Input","ContentChildren","Directive","NgModule","setLines","MatLine","MatLineModule","MatCommonModule","coerceNumberProperty","i1","_c0","_c1","_c2","_c3","TileCoordinator","columnIndex","rowIndex","rowCount","rowspan","lastRowMax","Math","max","tracker","update","numColumns","Array","fill","length","positions","map","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","ngDevMode","Error","gapEndIndex","_nextRow","indexOf","_findGapEndIndex","i","start","row","col","MAT_GRID_LIST","MatGridTile","_element","_gridList","_rowspan","_colspan","value","round","_setStyle","property","nativeElement","style","ɵfac","MatGridTile_Factory","t","ɵɵdirectiveInject","ElementRef","ɵcmp","ɵɵdefineComponent","type","hostAttrs","hostVars","hostBindings","MatGridTile_HostBindings","ɵɵattribute","inputs","exportAs","ngContentSelectors","MatGridTile_Template","ɵɵprojectionDef","ɵɵprojection","styles","encapsulation","changeDetection","ɵsetClassMetadata","args","selector","host","None","OnPush","undefined","decorators","MatGridTileText","ngAfterContentInit","_lines","MatGridTileText_Factory","contentQueries","MatGridTileText_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","MatGridTileText_Template","descendants","MatGridAvatarCssMatStyler","MatGridAvatarCssMatStyler_Factory","ɵdir","ɵɵdefineDirective","MatGridTileHeaderCssMatStyler","MatGridTileHeaderCssMatStyler_Factory","MatGridTileFooterCssMatStyler","MatGridTileFooterCssMatStyler_Factory","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","direction","_gutterSize","normalizeUnits","_cols","_direction","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","offset","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","test","reset","list","_setListStyle","_tiles","forEach","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","split","parseFloat","FitTileStyler","gutterHeightPerTile","exp","match","MAT_FIT_MODE","MatGridList","_dir","_gutter","rowHeight","_rowHeight","newValue","_setTileStyler","_checkCols","_checkRowHeight","ngAfterContentChecked","_layoutTiles","_tileStyler","_tileCoordinator","filter","index","pos","MatGridList_Factory","Directionality","MatGridList_ContentQueries","MatGridList_HostBindings","features","ɵɵProvidersFeature","provide","useExisting","MatGridList_Template","providers","MatGridListModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","ɵTileCoordinator"],"sourceRoot":"webpack:///","x_google_ignoreList":[3]}