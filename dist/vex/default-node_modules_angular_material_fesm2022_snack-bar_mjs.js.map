{"version":3,"file":"default-node_modules_angular_material_fesm2022_snack-bar_mjs.js","mappings":"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","sources":["./node_modules/@angular/material/fesm2022/snack-bar.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, inject, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i3 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i3$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i1 from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport * as i3$2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport { MatCommonModule } from '@angular/material/core';\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n            this.dismiss();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/** Directive that should be applied to the text element to be rendered in the snack bar. */\nclass MatSnackBarLabel {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSnackBarLabel, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatSnackBarLabel, selector: \"[matSnackBarLabel]\", host: { classAttribute: \"mat-mdc-snack-bar-label mdc-snackbar__label\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSnackBarLabel, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[matSnackBarLabel]`,\n                    host: {\n                        'class': 'mat-mdc-snack-bar-label mdc-snackbar__label',\n                    },\n                }]\n        }] });\n/** Directive that should be applied to the element containing the snack bar's action buttons. */\nclass MatSnackBarActions {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSnackBarActions, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatSnackBarActions, selector: \"[matSnackBarActions]\", host: { classAttribute: \"mat-mdc-snack-bar-actions mdc-snackbar__actions\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSnackBarActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[matSnackBarActions]`,\n                    host: {\n                        'class': 'mat-mdc-snack-bar-actions mdc-snackbar__actions',\n                    },\n                }]\n        }] });\n/** Directive that should be applied to each of the snack bar's action buttons. */\nclass MatSnackBarAction {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSnackBarAction, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatSnackBarAction, selector: \"[matSnackBarAction]\", host: { classAttribute: \"mat-mdc-snack-bar-action mdc-snackbar__action\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSnackBarAction, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[matSnackBarAction]`,\n                    host: {\n                        'class': 'mat-mdc-snack-bar-action mdc-snackbar__action',\n                    },\n                }]\n        }] });\n\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: SimpleSnackBar, deps: [{ token: MatSnackBarRef }, { token: MAT_SNACK_BAR_DATA }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.0\", type: SimpleSnackBar, selector: \"simple-snack-bar\", host: { classAttribute: \"mat-mdc-simple-snack-bar\" }, exportAs: [\"matSnackBar\"], ngImport: i0, template: \"<div matSnackBarLabel>\\n  {{data.message}}\\n</div>\\n\\n<div matSnackBarActions *ngIf=\\\"hasAction\\\">\\n  <button mat-button matSnackBarAction (click)=\\\"action()\\\">\\n    {{data.action}}\\n  </button>\\n</div>\\n\", styles: [\".mat-mdc-simple-snack-bar{display:flex}\"], dependencies: [{ kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i3.MatButton, selector: \"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  \", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"directive\", type: MatSnackBarLabel, selector: \"[matSnackBarLabel]\" }, { kind: \"directive\", type: MatSnackBarActions, selector: \"[matSnackBarActions]\" }, { kind: \"directive\", type: MatSnackBarAction, selector: \"[matSnackBarAction]\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: SimpleSnackBar, decorators: [{\n            type: Component,\n            args: [{ selector: 'simple-snack-bar', exportAs: 'matSnackBar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mat-mdc-simple-snack-bar',\n                    }, template: \"<div matSnackBarLabel>\\n  {{data.message}}\\n</div>\\n\\n<div matSnackBarActions *ngIf=\\\"hasAction\\\">\\n  <button mat-button matSnackBarAction (click)=\\\"action()\\\">\\n    {{data.action}}\\n  </button>\\n</div>\\n\", styles: [\".mat-mdc-simple-snack-bar{display:flex}\"] }]\n        }], ctorParameters: function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DATA]\n                }] }]; } });\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0,\n        }))),\n    ]),\n};\n\nlet uniqueId = 0;\n/**\n * Base class for snack bar containers.\n * @docs-private\n */\nclass _MatSnackBarContainerBase extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        this._document = inject(DOCUMENT);\n        this._trackedModals = new Set();\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /** Unique ID of the aria-live element. */\n        this._liveElementId = `mat-snack-bar-container-live-${uniqueId++}`;\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            const result = this._portalOutlet.attachDomPortal(portal);\n            this._afterPortalAttached();\n            return result;\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // It's common for snack bars to be opened by random outside calls like HTTP requests or\n        // errors. Run inside the NgZone to ensure that it functions correctly.\n        this._ngZone.run(() => {\n            // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n            // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n            // `MatSnackBar.open`).\n            this._animationState = 'hidden';\n            // Mark this element with an 'exit' attribute to indicate that the snackbar has\n            // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n            // test harness.\n            this._elementRef.nativeElement.setAttribute('mat-exit', '');\n            // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n            // long enough to visually read it either, so clear the timeout for announcing.\n            clearTimeout(this._announceTimeoutId);\n        });\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._clearFromModals();\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._ngZone.run(() => {\n                this._onExit.next();\n                this._onExit.complete();\n            });\n        });\n    }\n    /**\n     * Called after the portal contents have been attached. Can be\n     * used to modify the DOM once it's guaranteed to be in place.\n     */\n    _afterPortalAttached() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        this._exposeToModals();\n    }\n    /**\n     * Some browsers won't expose the accessibility node of the live element if there is an\n     * `aria-modal` and the live element is outside of it. This method works around the issue by\n     * pointing the `aria-owns` of all modals to the live element.\n     */\n    _exposeToModals() {\n        // TODO(crisbeto): consider de-duplicating this with the `LiveAnnouncer`.\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const id = this._liveElementId;\n        const modals = this._document.querySelectorAll('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        for (let i = 0; i < modals.length; i++) {\n            const modal = modals[i];\n            const ariaOwns = modal.getAttribute('aria-owns');\n            this._trackedModals.add(modal);\n            if (!ariaOwns) {\n                modal.setAttribute('aria-owns', id);\n            }\n            else if (ariaOwns.indexOf(id) === -1) {\n                modal.setAttribute('aria-owns', ariaOwns + ' ' + id);\n            }\n        }\n    }\n    /** Clears the references to the live element from any modals it was added to. */\n    _clearFromModals() {\n        this._trackedModals.forEach(modal => {\n            const ariaOwns = modal.getAttribute('aria-owns');\n            if (ariaOwns) {\n                const newValue = ariaOwns.replace(this._liveElementId, '').trim();\n                if (newValue.length > 0) {\n                    modal.setAttribute('aria-owns', newValue);\n                }\n                else {\n                    modal.removeAttribute('aria-owns');\n                }\n            }\n        });\n        this._trackedModals.clear();\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement?.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: _MatSnackBarContainerBase, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Platform }, { token: MatSnackBarConfig }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: _MatSnackBarContainerBase, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: _MatSnackBarContainerBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Platform }, { type: MatSnackBarConfig }]; }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends _MatSnackBarContainerBase {\n    /** Applies the correct CSS class to the label based on its content. */\n    _afterPortalAttached() {\n        super._afterPortalAttached();\n        // Check to see if the attached component or template uses the MDC template structure,\n        // specifically the MDC label. If not, the container should apply the MDC label class to this\n        // component's label container, which will apply MDC's label styles to the attached view.\n        const label = this._label.nativeElement;\n        const labelClass = 'mdc-snackbar__label';\n        label.classList.toggle(labelClass, !label.querySelector(`.${labelClass}`));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSnackBarContainer, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatSnackBarContainer, selector: \"mat-snack-bar-container\", host: { listeners: { \"@state.done\": \"onAnimationEnd($event)\" }, properties: { \"@state\": \"_animationState\" }, classAttribute: \"mdc-snackbar mat-mdc-snack-bar-container mdc-snackbar--open\" }, viewQueries: [{ propertyName: \"_label\", first: true, predicate: [\"label\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mdc-snackbar__surface\\\">\\n  <!--\\n    This outer label wrapper will have the class `mdc-snackbar__label` applied if\\n    the attached template/component does not contain it.\\n  -->\\n  <div class=\\\"mat-mdc-snack-bar-label\\\" #label>\\n    <!-- Initialy holds the snack bar content, will be empty after announcing to screen readers. -->\\n    <div aria-hidden=\\\"true\\\">\\n      <ng-template cdkPortalOutlet></ng-template>\\n    </div>\\n\\n    <!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n    <div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\" [attr.id]=\\\"_liveElementId\\\"></div>\\n  </div>\\n</div>\\n\", styles: [\".mdc-snackbar{display:none;position:fixed;right:0;bottom:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;pointer-events:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-snackbar--opening,.mdc-snackbar--open,.mdc-snackbar--closing{display:flex}.mdc-snackbar--open .mdc-snackbar__label,.mdc-snackbar--open .mdc-snackbar__actions{visibility:visible}.mdc-snackbar__surface{padding-left:0;padding-right:8px;display:flex;align-items:center;justify-content:flex-start;box-sizing:border-box;transform:scale(0.8);opacity:0}.mdc-snackbar__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-snackbar__surface::before{border-color:CanvasText}}[dir=rtl] .mdc-snackbar__surface,.mdc-snackbar__surface[dir=rtl]{padding-left:8px;padding-right:0}.mdc-snackbar--open .mdc-snackbar__surface{transform:scale(1);opacity:1;pointer-events:auto}.mdc-snackbar--closing .mdc-snackbar__surface{transform:scale(1)}.mdc-snackbar__label{padding-left:16px;padding-right:8px;width:100%;flex-grow:1;box-sizing:border-box;margin:0;visibility:hidden;padding-top:14px;padding-bottom:14px}[dir=rtl] .mdc-snackbar__label,.mdc-snackbar__label[dir=rtl]{padding-left:8px;padding-right:16px}.mdc-snackbar__label::before{display:inline;content:attr(data-mdc-snackbar-label-text)}.mdc-snackbar__actions{display:flex;flex-shrink:0;align-items:center;box-sizing:border-box;visibility:hidden}.mdc-snackbar__action+.mdc-snackbar__dismiss{margin-left:8px;margin-right:0}[dir=rtl] .mdc-snackbar__action+.mdc-snackbar__dismiss,.mdc-snackbar__action+.mdc-snackbar__dismiss[dir=rtl]{margin-left:0;margin-right:8px}.mat-mdc-snack-bar-container{margin:8px;--mdc-snackbar-container-shape:4px;position:static}.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:344px}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:100%}}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container{width:100vw}}.mat-mdc-snack-bar-container .mdc-snackbar__surface{max-width:672px}.mat-mdc-snack-bar-container .mdc-snackbar__surface{box-shadow:0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{background-color:var(--mdc-snackbar-container-color)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{border-radius:var(--mdc-snackbar-container-shape)}.mat-mdc-snack-bar-container .mdc-snackbar__label{color:var(--mdc-snackbar-supporting-text-color)}.mat-mdc-snack-bar-container .mdc-snackbar__label{font-size:var(--mdc-snackbar-supporting-text-size);font-family:var(--mdc-snackbar-supporting-text-font);font-weight:var(--mdc-snackbar-supporting-text-weight);line-height:var(--mdc-snackbar-supporting-text-line-height)}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled){color:var(--mat-snack-bar-button-color);--mat-mdc-button-persistent-ripple-color: currentColor}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled) .mat-ripple-element{background-color:currentColor;opacity:.1}.mat-mdc-snack-bar-container .mdc-snackbar__label::before{display:none}.mat-mdc-snack-bar-handset,.mat-mdc-snack-bar-container,.mat-mdc-snack-bar-label{flex:1 1 auto}.mat-mdc-snack-bar-handset .mdc-snackbar__surface{width:100%}\"], dependencies: [{ kind: \"directive\", type: i3$1.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matSnackBarAnimations.snackBarState], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSnackBarContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-snack-bar-container', changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], host: {\n                        'class': 'mdc-snackbar mat-mdc-snack-bar-container mdc-snackbar--open',\n                        '[@state]': '_animationState',\n                        '(@state.done)': 'onAnimationEnd($event)',\n                    }, template: \"<div class=\\\"mdc-snackbar__surface\\\">\\n  <!--\\n    This outer label wrapper will have the class `mdc-snackbar__label` applied if\\n    the attached template/component does not contain it.\\n  -->\\n  <div class=\\\"mat-mdc-snack-bar-label\\\" #label>\\n    <!-- Initialy holds the snack bar content, will be empty after announcing to screen readers. -->\\n    <div aria-hidden=\\\"true\\\">\\n      <ng-template cdkPortalOutlet></ng-template>\\n    </div>\\n\\n    <!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n    <div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\" [attr.id]=\\\"_liveElementId\\\"></div>\\n  </div>\\n</div>\\n\", styles: [\".mdc-snackbar{display:none;position:fixed;right:0;bottom:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;pointer-events:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-snackbar--opening,.mdc-snackbar--open,.mdc-snackbar--closing{display:flex}.mdc-snackbar--open .mdc-snackbar__label,.mdc-snackbar--open .mdc-snackbar__actions{visibility:visible}.mdc-snackbar__surface{padding-left:0;padding-right:8px;display:flex;align-items:center;justify-content:flex-start;box-sizing:border-box;transform:scale(0.8);opacity:0}.mdc-snackbar__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-snackbar__surface::before{border-color:CanvasText}}[dir=rtl] .mdc-snackbar__surface,.mdc-snackbar__surface[dir=rtl]{padding-left:8px;padding-right:0}.mdc-snackbar--open .mdc-snackbar__surface{transform:scale(1);opacity:1;pointer-events:auto}.mdc-snackbar--closing .mdc-snackbar__surface{transform:scale(1)}.mdc-snackbar__label{padding-left:16px;padding-right:8px;width:100%;flex-grow:1;box-sizing:border-box;margin:0;visibility:hidden;padding-top:14px;padding-bottom:14px}[dir=rtl] .mdc-snackbar__label,.mdc-snackbar__label[dir=rtl]{padding-left:8px;padding-right:16px}.mdc-snackbar__label::before{display:inline;content:attr(data-mdc-snackbar-label-text)}.mdc-snackbar__actions{display:flex;flex-shrink:0;align-items:center;box-sizing:border-box;visibility:hidden}.mdc-snackbar__action+.mdc-snackbar__dismiss{margin-left:8px;margin-right:0}[dir=rtl] .mdc-snackbar__action+.mdc-snackbar__dismiss,.mdc-snackbar__action+.mdc-snackbar__dismiss[dir=rtl]{margin-left:0;margin-right:8px}.mat-mdc-snack-bar-container{margin:8px;--mdc-snackbar-container-shape:4px;position:static}.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:344px}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:100%}}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container{width:100vw}}.mat-mdc-snack-bar-container .mdc-snackbar__surface{max-width:672px}.mat-mdc-snack-bar-container .mdc-snackbar__surface{box-shadow:0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{background-color:var(--mdc-snackbar-container-color)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{border-radius:var(--mdc-snackbar-container-shape)}.mat-mdc-snack-bar-container .mdc-snackbar__label{color:var(--mdc-snackbar-supporting-text-color)}.mat-mdc-snack-bar-container .mdc-snackbar__label{font-size:var(--mdc-snackbar-supporting-text-size);font-family:var(--mdc-snackbar-supporting-text-font);font-weight:var(--mdc-snackbar-supporting-text-weight);line-height:var(--mdc-snackbar-supporting-text-line-height)}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled){color:var(--mat-snack-bar-button-color);--mat-mdc-button-persistent-ripple-color: currentColor}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled) .mat-ripple-element{background-color:currentColor;opacity:.1}.mat-mdc-snack-bar-container .mdc-snackbar__label::before{display:none}.mat-mdc-snack-bar-handset,.mat-mdc-snack-bar-container,.mat-mdc-snack-bar-label{flex:1 1 auto}.mat-mdc-snack-bar-handset .mdc-snackbar__surface{width:100%}\"] }]\n        }], propDecorators: { _label: [{\n                type: ViewChild,\n                args: ['label', { static: true }]\n            }] } });\n\nclass MatSnackBarModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSnackBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSnackBarModule, declarations: [SimpleSnackBar,\n            MatSnackBarContainer,\n            MatSnackBarLabel,\n            MatSnackBarActions,\n            MatSnackBarAction], imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], exports: [MatCommonModule,\n            MatSnackBarContainer,\n            MatSnackBarLabel,\n            MatSnackBarActions,\n            MatSnackBarAction] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSnackBarModule, imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSnackBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n                    exports: [\n                        MatCommonModule,\n                        MatSnackBarContainer,\n                        MatSnackBarLabel,\n                        MatSnackBarActions,\n                        MatSnackBarAction,\n                    ],\n                    declarations: [\n                        SimpleSnackBar,\n                        MatSnackBarContainer,\n                        MatSnackBarLabel,\n                        MatSnackBarActions,\n                        MatSnackBarAction,\n                    ],\n                }]\n        }] });\n\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\nclass _MatSnackBarBase {\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = { ...this._defaultConfig, ...config };\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = { ...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig };\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef,\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver\n            .observe(Breakpoints.HandsetPortrait)\n            .pipe(takeUntil(overlayRef.detachments()))\n            .subscribe(state => {\n            overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl);\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data },\n            ],\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: _MatSnackBarBase, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: _MatSnackBarBase, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: _MatSnackBarBase }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: _MatSnackBarBase, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: _MatSnackBarBase, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: MatSnackBarConfig, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                }] }]; } });\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar extends _MatSnackBarBase {\n    constructor(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig) {\n        super(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig);\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        this.handsetCssClass = 'mat-mdc-snack-bar-handset';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSnackBar, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: MatSnackBar, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSnackBar, providedIn: MatSnackBarModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSnackBar, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: MatSnackBarModule }]\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: MatSnackBarConfig, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                }] }]; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarAction, MatSnackBarActions, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarLabel, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, _MatSnackBarBase, _MatSnackBarContainerBase, matSnackBarAnimations };\n"],"names":["i0","InjectionToken","Directive","Component","ViewEncapsulation","ChangeDetectionStrategy","Inject","inject","ViewChild","NgModule","Injector","TemplateRef","Injectable","Optional","SkipSelf","Subject","i2","DOCUMENT","CommonModule","i3","MatButtonModule","trigger","state","style","transition","animate","i3$1","BasePortalOutlet","CdkPortalOutlet","PortalModule","ComponentPortal","TemplatePortal","i1","take","takeUntil","i2$1","i3$2","Breakpoints","i1$1","OverlayModule","OverlayConfig","MatCommonModule","SimpleSnackBar_div_2_Template","rf","ctx","_r2","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","SimpleSnackBar_div_2_Template_button_click_1_listener","ɵɵrestoreView","ctx_r1","ɵɵnextContext","ɵɵresetView","action","ɵɵtext","ɵɵelementEnd","ctx_r0","ɵɵadvance","ɵɵtextInterpolate1","data","_c0","MatSnackBarContainer_ng_template_4_Template","MAX_TIMEOUT","Math","pow","MatSnackBarRef","constructor","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","_onExit","subscribe","_finishDismiss","dismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","next","complete","closeWithAction","_dismissAfter","duration","setTimeout","min","_open","dispose","dismissedByAction","afterDismissed","afterOpened","_onEnter","onAction","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","MatSnackBarLabel","ɵfac","MatSnackBarLabel_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","ngDevMode","ɵsetClassMetadata","args","selector","host","MatSnackBarActions","MatSnackBarActions_Factory","MatSnackBarAction","MatSnackBarAction_Factory","SimpleSnackBar","snackBarRef","hasAction","SimpleSnackBar_Factory","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","exportAs","decls","vars","consts","template","SimpleSnackBar_Template","ɵɵtemplate","message","ɵɵproperty","dependencies","NgIf","MatButton","styles","encapsulation","changeDetection","None","OnPush","undefined","decorators","matSnackBarAnimations","snackBarState","transform","opacity","uniqueId","_MatSnackBarContainerBase","_ngZone","_elementRef","_changeDetectorRef","_platform","snackBarConfig","_document","_trackedModals","Set","_announceDelay","_destroyed","_onAnnounce","_animationState","_liveElementId","attachDomPortal","portal","_assertNotAttached","result","_portalOutlet","_afterPortalAttached","_live","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","onAnimationEnd","event","fromState","toState","_completeExit","onEnter","run","enter","detectChanges","_screenReaderAnnounce","nativeElement","setAttribute","_announceTimeoutId","ngOnDestroy","_clearFromModals","onMicrotaskEmpty","pipe","element","panelClasses","panelClass","Array","isArray","forEach","cssClass","classList","add","_exposeToModals","id","modals","querySelectorAll","i","length","modal","ariaOwns","getAttribute","indexOf","newValue","replace","trim","removeAttribute","clear","hasAttached","Error","runOutsideAngular","inertElement","querySelector","liveElement","focusedElement","isBrowser","document","activeElement","HTMLElement","contains","appendChild","focus","_MatSnackBarContainerBase_Factory","NgZone","ElementRef","ChangeDetectorRef","Platform","viewQuery","_MatSnackBarContainerBase_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","features","ɵɵInheritDefinitionFeature","static","MatSnackBarContainer","label","_label","labelClass","toggle","ɵMatSnackBarContainer_BaseFactory","MatSnackBarContainer_Factory","ɵɵgetInheritedFactory","MatSnackBarContainer_Query","hostVars","hostBindings","MatSnackBarContainer_HostBindings","ɵɵsyntheticHostListener","MatSnackBarContainer_animation_state_done_HostBindingHandler","$event","ɵɵsyntheticHostProperty","MatSnackBarContainer_Template","ɵɵelement","ɵɵattribute","animation","Default","animations","MatSnackBarModule","MatSnackBarModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","factory","_MatSnackBarBase","_openedSnackBarRef","parent","_parentSnackBar","_snackBarRefAtThisLevel","value","_overlay","_injector","_breakpointObserver","_defaultConfig","openFromComponent","component","config","_attach","openFromTemplate","open","_config","simpleSnackBarComponent","_attachSnackBarContainer","overlayRef","userInjector","viewContainerRef","injector","create","providers","provide","useValue","containerPortal","snackBarContainerComponent","containerRef","attach","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","HandsetPortrait","detachments","overlayElement","handsetCssClass","matches","announce","_animateSnackBar","overlayConfig","direction","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","_MatSnackBarBase_Factory","ɵɵinject","Overlay","LiveAnnouncer","BreakpointObserver","ɵprov","ɵɵdefineInjectable","token","MatSnackBar","overlay","live","breakpointObserver","parentSnackBar","defaultConfig","MatSnackBar_Factory"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}