{"version":3,"file":"src_app_pages_pages_auth_forgot-password_forgot-password_module_ts.js","mappings":"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","sources":["./src/@vex/animations/fade-in-up.animation.ts","./src/app/pages/pages/auth/forgot-password/forgot-password-routing.module.ts","./src/app/pages/pages/auth/forgot-password/forgot-password.component.ts","./src/app/pages/pages/auth/forgot-password/forgot-password.component.html","./src/app/pages/pages/auth/forgot-password/forgot-password.module.ts","./node_modules/ngx-captcha/fesm2020/ngx-captcha.mjs"],"sourcesContent":["import { animate, style, transition, trigger } from '@angular/animations';\r\n\r\nexport function fadeInUpAnimation(duration: number) {\r\n  return trigger('fadeInUp', [\r\n    transition(':enter', [\r\n      style({\r\n        transform: 'translateY(20px)',\r\n        opacity: 0\r\n      }),\r\n      animate(`${duration}ms cubic-bezier(0.35, 0, 0.25, 1)`, style({\r\n        transform: 'translateY(0)',\r\n        opacity: 1\r\n      }))\r\n    ])\r\n  ]);\r\n}\r\n\r\nexport const fadeInUp400ms = fadeInUpAnimation(400);\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { QuicklinkModule } from 'ngx-quicklink';\r\nimport { ForgotPasswordComponent } from './forgot-password.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ForgotPasswordComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule, QuicklinkModule]\r\n})\r\nexport class ForgotPasswordRoutingModule {\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { UntypedFormBuilder, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { fadeInUp400ms } from '../../../../../@vex/animations/fade-in-up.animation';\r\nimport {FormGroup,FormBuilder} from '@angular/forms';\r\n//left arrow \r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'vex-forgot-password',\r\n  templateUrl: './forgot-password.component.html',\r\n  styleUrls: ['./forgot-password.component.scss'],\r\n  animations: [fadeInUp400ms]\r\n})\r\nexport class ForgotPasswordComponent implements OnInit {\r\n\r\n//captcha form group\r\nprotected aFormGroup: FormGroup;\r\n\r\n\r\n//left arrow \r\nicon = faArrowLeft;\r\npasswordSent = false;\r\nbuttonText = 'SEND RECOVERY LINK';\r\n\r\n//Image URLS \r\nimageUrl = 'assets/img/icons/forgot-password-icons/Vector.png';\r\n\r\n\r\n  form = this.fb.group({\r\n    email: [null, Validators.required]\r\n  });\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private fb: UntypedFormBuilder,\r\n    private formBuilder: FormBuilder\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n\r\n    //captcha\r\nthis.aFormGroup = this.formBuilder.group({\r\n  recaptcha:['', Validators.required]\r\n})\r\n\r\n  }\r\n  \r\n//captcha site key make sure to change this according to your domain (I used Localhost login on transco gmail)\r\n\r\n  siteKey:string =\"6Lfm5R4pAAAAAH8_jyMZ7AVsigdgQWzHiow3Q7a5\";\r\n\r\n  send(event: Event) {\r\n    //prevent from redirecting when send is clicked \r\n    event.preventDefault();\r\n\r\n\r\n    // this.router.navigate(['/']);\r\n    this.imageUrl = 'assets/img/icons/forgot-password-icons/reset-password-sent.svg';\r\n\r\n\r\n    this.passwordSent = true;\r\n  }\r\n}\r\n","\r\n<!-- Logo  -->\r\n\r\n<div class=\"logo-container\">\r\n  <img src=\"assets/img/demo/logo.svg\" alt=\"Logo\">\r\n</div>\r\n\r\n<!-- blue rectangle  -->\r\n\r\n<div class=\"rectangle\"></div>\r\n\r\n<div class=\"Icon-container\" style=\"padding: 20px;\"> \r\n  <fa-icon [icon]=\"icon\" style=\"color: #043C79; font-size: 30px;\"></fa-icon>\r\n</div>\r\n\r\n<!-- Forgot password section   -->\r\n<ng-container *ngIf=\"!passwordSent; else sent\">\r\n  <!-- Forgot password form here -->\r\n  <div class=\"Image-container\">\r\n    <img [src]=\"imageUrl\" alt=\"Forgot Password\" class=\"centered-image\">\r\n    <div class=\"text-container\">\r\n      <h2>Forgot Password</h2>\r\n      <p>Please enter your email address below</p>\r\n    </div>\r\n\r\n    <!-- Form and button -->\r\n    <div [formGroup]=\"form\" class=\"flex flex-col form-container\">\r\n      <mat-form-field appearance=\"outline\">\r\n        <mat-label>Enter your email address</mat-label>\r\n        <input formControlName=\"email\" matInput required>\r\n        <mat-icon class=\"mr-2\" matPrefix svgIcon=\"mat:mail\"></mat-icon>\r\n        <mat-error *ngIf=\"form.get('email').hasError('required')\">\r\n          We can't recover your password without your email.\r\n        </mat-error>\r\n      </mat-form-field>\r\n</div>\r\n<!-- \r\ncaptcha -->\r\n<form [formGroup]=\"aFormGroup\">\r\n  <ngx-recaptcha2 #captchaElem\r\n  [siteKey] = \"siteKey\"\r\n  formControlName =\"recaptcha\">\r\n  </ngx-recaptcha2>\r\n  </form>\r\n\r\n\r\n      <!-- Submit button -->\r\n      <button (click)=\"send($event)\"  mat-raised-button type =\"button\" color=\"primary\" style=\"background-color: #043C79; height: 60px; font-size: 18px; width: 310px; height: 30px; border-radius:8px; margin-top:20px;\">\r\n        Submit\r\n      </button>\r\n\r\n    \r\n    \r\n    </div>\r\n  \r\n</ng-container>\r\n\r\n\r\n\r\n\r\n<ng-template #sent>\r\n  <!-- Forgot password successful message here -->\r\n  <div class=\"success-message\">\r\n    <div class=\"Image-container\">\r\n      <img [src]=\"imageUrl\" alt=\"Reset Password Sent\" class=\"centered-image\" style=\"color:#043C79\">\r\n      <div class=\"text-container\">\r\n        <h2>RESET PASSWORD REQUEST SENT</h2>\r\n\r\n    \r\n      </div>\r\n      <p style=\"color: #555555; padding-top: 40px;\">A confirmation link is sent to your registered email. Please reset your password\r\n        <br> using the link. If you have not received it, please contact your administrator.\r\n\r\n      </p>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n\r\n\r\n\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ForgotPasswordRoutingModule } from './forgot-password-routing.module';\r\nimport { ForgotPasswordComponent } from './forgot-password.component';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { NgxCaptchaModule } from 'ngx-captcha';\r\n\r\n@NgModule({\r\n  declarations: [ForgotPasswordComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ForgotPasswordRoutingModule,\r\n    ReactiveFormsModule,FormsModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    FontAwesomeModule,\r\n    NgxCaptchaModule\r\n  ]\r\n})\r\nexport class ForgotPasswordModule {\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, InjectFlags, Directive, Input, Output, forwardRef, Component, ViewChild, NgModule } from '@angular/core';\nimport { NgControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nclass ScriptService {\r\n    constructor(zone) {\r\n        this.zone = zone;\r\n        this.scriptElemId = \"ngx-catpcha-script\";\r\n        /**\r\n         * Name of the global google recaptcha script\r\n         */\r\n        this.windowGrecaptcha = \"grecaptcha\";\r\n        /**\r\n         * Name of enterpise property in the global google recaptcha script\r\n         */\r\n        this.windowGrecaptchaEnterprise = \"enterprise\";\r\n        /**\r\n         * Name of the global callback\r\n         */\r\n        this.windowOnLoadCallbackProperty = \"ngx_captcha_onload_callback\";\r\n        /**\r\n         * Name of the global callback for enterprise\r\n         */\r\n        this.windowOnLoadEnterpriseCallbackProperty = \"ngx_captcha_onload_enterprise_callback\";\r\n        this.globalDomain = \"recaptcha.net\";\r\n        this.defaultDomain = \"google.com\";\r\n        this.enterpriseApi = \"enterprise.js\";\r\n        this.defaultApi = \"api.js\";\r\n    }\r\n    registerCaptchaScript(config, render, onLoad, language) {\r\n        if (this.grecaptchaScriptLoaded(config.useEnterprise)) {\r\n            // recaptcha script is already loaded\r\n            // just call the callback\r\n            if (config.useEnterprise) {\r\n                this.zone.run(() => {\r\n                    onLoad(window[this.windowGrecaptcha][this.windowGrecaptchaEnterprise]);\r\n                });\r\n            }\r\n            else {\r\n                this.zone.run(() => {\r\n                    onLoad(window[this.windowGrecaptcha]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n        // we need to patch the callback through global variable, otherwise callback is not accessible\r\n        // note: https://github.com/Enngage/ngx-captcha/issues/2\r\n        if (config.useEnterprise) {\r\n            window[this.getCallbackName(true)] = ((() => this.zone.run(onLoad.bind(this, window[this.windowGrecaptcha][this.windowGrecaptchaEnterprise]))));\r\n        }\r\n        else {\r\n            window[this.getCallbackName(false)] = ((() => this.zone.run(onLoad.bind(this, window[this.windowGrecaptcha]))));\r\n        }\r\n        // prepare script elem\r\n        const scriptElem = document.createElement(\"script\");\r\n        scriptElem.id = this.scriptElemId;\r\n        scriptElem.innerHTML = \"\";\r\n        scriptElem.src = this.getCaptchaScriptUrl(config, render, language);\r\n        scriptElem.async = true;\r\n        scriptElem.defer = true;\r\n        // add script to header\r\n        document.getElementsByTagName(\"head\")[0].appendChild(scriptElem);\r\n    }\r\n    cleanup() {\r\n        const elem = document.getElementById(this.scriptElemId);\r\n        if (elem) {\r\n            elem.remove();\r\n        }\r\n        window[this.getCallbackName()] = undefined;\r\n        window[this.windowGrecaptcha] = undefined;\r\n    }\r\n    /**\r\n     * Indicates if google recaptcha script is available and ready to be used\r\n     */\r\n    grecaptchaScriptLoaded(useEnterprise) {\r\n        if (!window[this.getCallbackName(useEnterprise)] ||\r\n            !window[this.windowGrecaptcha]) {\r\n            return false;\r\n        }\r\n        else if (useEnterprise &&\r\n            window[this.windowGrecaptcha][this.windowGrecaptchaEnterprise]) {\r\n            return true;\r\n            // if only enterprise script is loaded we need to check some v3's method\r\n        }\r\n        else if (window[this.windowGrecaptcha].execute) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Gets global callback name\r\n     * @param useEnterprise Optional flag for enterprise script\r\n     * @private\r\n     */\r\n    getCallbackName(useEnterprise) {\r\n        return useEnterprise\r\n            ? this.windowOnLoadEnterpriseCallbackProperty\r\n            : this.windowOnLoadCallbackProperty;\r\n    }\r\n    /**\r\n     * Gets language param used in script url\r\n     */\r\n    getLanguageParam(hl) {\r\n        if (!hl) {\r\n            return \"\";\r\n        }\r\n        return `&hl=${hl}`;\r\n    }\r\n    /**\r\n     * Url to google api script\r\n     */\r\n    getCaptchaScriptUrl(config, render, language) {\r\n        const domain = config.useGlobalDomain\r\n            ? this.globalDomain\r\n            : this.defaultDomain;\r\n        const api = config.useEnterprise ? this.enterpriseApi : this.defaultApi;\r\n        const callback = this.getCallbackName(config.useEnterprise);\r\n        return `https://www.${domain}/recaptcha/${api}?onload=${callback}&render=${render}${this.getLanguageParam(language)}`;\r\n    }\r\n}\r\n/** @nocollapse */ ScriptService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ScriptService, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\r\n/** @nocollapse */ ScriptService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ScriptService, providedIn: \"root\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ScriptService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: \"root\",\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });\n\nclass BaseReCaptchaComponentDirective {\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n         * Prefix of the captcha element\r\n         */\r\n        this.captchaElemPrefix = \"ngx_captcha_id_\";\r\n        this.setupCaptcha = true;\r\n        /**\r\n         * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n         */\r\n        this.useGlobalDomain = false;\r\n        this.useEnterprise = false;\r\n        /**\r\n         * Type\r\n         */\r\n        this.type = \"image\";\r\n        /**\r\n         * Tab index\r\n         */\r\n        this.tabIndex = 0;\r\n        /**\r\n         * Called when captcha receives successful response.\r\n         * Captcha response token is passed to event.\r\n         */\r\n        this.success = new EventEmitter();\r\n        /**\r\n         * Called when captcha is loaded. Event receives id of the captcha\r\n         */\r\n        this.load = new EventEmitter();\r\n        /**\r\n         * Called when captcha is reset.\r\n         */\r\n        this.reset = new EventEmitter();\r\n        /**\r\n         * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n         */\r\n        this.ready = new EventEmitter();\r\n        /**\r\n         * Error callback\r\n         */\r\n        this.error = new EventEmitter();\r\n        /**\r\n         * Expired callback\r\n         */\r\n        this.expire = new EventEmitter();\r\n        /**\r\n         * Indicates if captcha should be set on load\r\n         */\r\n        this.setupAfterLoad = false;\r\n        /**\r\n         * If enabled, captcha will reset after receiving success response. This is useful\r\n         * when invisible captcha need to be resolved multiple times on same page\r\n         */\r\n        this.resetCaptchaAfterSuccess = false;\r\n        /**\r\n         * Required by ControlValueAccessor\r\n         */\r\n        this.onChange = (val) => { };\r\n        this.onTouched = (val) => { };\r\n        /**\r\n         * Indicates if captcha is loaded\r\n         */\r\n        this.isLoaded = false;\r\n    }\r\n    ngAfterViewInit() {\r\n        this.control = this.injector.get(NgControl, undefined, InjectFlags.Optional)?.control;\r\n    }\r\n    ngAfterViewChecked() {\r\n        if (this.setupCaptcha) {\r\n            this.setupCaptcha = false;\r\n            this.setupComponent();\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        // cleanup scripts if language changed because they need to be reloaded\r\n        if (changes && changes.hl) {\r\n            // cleanup scripts when language changes\r\n            if (!changes.hl.firstChange &&\r\n                changes.hl.currentValue !== changes.hl.previousValue) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n        if (changes && changes.useGlobalDomain) {\r\n            // cleanup scripts when domain changes\r\n            if (!changes.useGlobalDomain.firstChange &&\r\n                changes.useGlobalDomain.currentValue !==\r\n                    changes.useGlobalDomain.previousValue) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n        this.setupCaptcha = true;\r\n    }\r\n    /**\r\n     * Gets captcha response as per reCaptcha docs\r\n     */\r\n    getResponse() {\r\n        return this.reCaptchaApi.getResponse(this.captchaId);\r\n    }\r\n    /**\r\n     * Gets Id of captcha widget\r\n     */\r\n    getCaptchaId() {\r\n        return this.captchaId;\r\n    }\r\n    /**\r\n     * Resets captcha\r\n     */\r\n    resetCaptcha() {\r\n        this.zone.run(() => {\r\n            // reset captcha using Google js api\r\n            this.reCaptchaApi.reset();\r\n            // required due to forms\r\n            this.onChange(undefined);\r\n            this.onTouched(undefined);\r\n            // trigger reset event\r\n            this.reset.next();\r\n        });\r\n    }\r\n    /**\r\n     * Gets last submitted captcha response\r\n     */\r\n    getCurrentResponse() {\r\n        return this.currentResponse;\r\n    }\r\n    /**\r\n     * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n     */\r\n    reloadCaptcha() {\r\n        this.setupComponent();\r\n    }\r\n    ensureCaptchaElem(captchaElemId) {\r\n        const captchaElem = document.getElementById(captchaElemId);\r\n        if (!captchaElem) {\r\n            throw Error(`Captcha element with id '${captchaElemId}' was not found`);\r\n        }\r\n        // assign captcha alem\r\n        this.captchaElem = captchaElem;\r\n    }\r\n    /**\r\n     * Responsible for instantiating captcha element\r\n     */\r\n    renderReCaptcha() {\r\n        // run outside angular zone due to timeout issues when testing\r\n        // details: https://github.com/Enngage/ngx-captcha/issues/26\r\n        this.zone.runOutsideAngular(() => {\r\n            // to fix reCAPTCHA placeholder element must be an element or id\r\n            // https://github.com/Enngage/ngx-captcha/issues/96\r\n            setTimeout(() => {\r\n                this.captchaId = this.reCaptchaApi.render(this.captchaElemId, this.getCaptchaProperties());\r\n                this.ready.next();\r\n            }, 0);\r\n        });\r\n    }\r\n    /**\r\n     * Called when captcha receives response\r\n     * @param callback Callback\r\n     */\r\n    handleCallback(callback) {\r\n        this.currentResponse = callback;\r\n        this.success.next(callback);\r\n        this.zone.run(() => {\r\n            this.onChange(callback);\r\n            this.onTouched(callback);\r\n        });\r\n        if (this.resetCaptchaAfterSuccess) {\r\n            this.resetCaptcha();\r\n        }\r\n    }\r\n    getPseudoUniqueNumber() {\r\n        return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\r\n    }\r\n    setupComponent() {\r\n        // captcha specific setup\r\n        this.captchaSpecificSetup();\r\n        // create captcha wrapper\r\n        this.createAndSetCaptchaElem();\r\n        this.scriptService.registerCaptchaScript({\r\n            useGlobalDomain: this.useGlobalDomain,\r\n            useEnterprise: this.useEnterprise,\r\n        }, \"explicit\", (grecaptcha) => {\r\n            this.onloadCallback(grecaptcha);\r\n        }, this.hl);\r\n    }\r\n    /**\r\n     * Called when google's recaptcha script is ready\r\n     */\r\n    onloadCallback(grecapcha) {\r\n        // assign reference to reCaptcha Api once its loaded\r\n        this.reCaptchaApi = grecapcha;\r\n        if (!this.reCaptchaApi) {\r\n            throw Error(`ReCaptcha Api was not initialized correctly`);\r\n        }\r\n        // loaded flag\r\n        this.isLoaded = true;\r\n        // fire load event\r\n        this.load.next();\r\n        // render captcha\r\n        this.renderReCaptcha();\r\n        // setup component if it was flagged as such\r\n        if (this.setupAfterLoad) {\r\n            this.setupAfterLoad = false;\r\n            this.setupComponent();\r\n        }\r\n    }\r\n    generateNewElemId() {\r\n        return this.captchaElemPrefix + this.getPseudoUniqueNumber();\r\n    }\r\n    createAndSetCaptchaElem() {\r\n        // generate new captcha id\r\n        this.captchaElemId = this.generateNewElemId();\r\n        if (!this.captchaElemId) {\r\n            throw Error(`Captcha elem Id is not set`);\r\n        }\r\n        if (!this.captchaWrapperElem) {\r\n            throw Error(`Captcha DOM element is not initialized`);\r\n        }\r\n        // remove old html\r\n        this.captchaWrapperElem.nativeElement.innerHTML = \"\";\r\n        // create new wrapper for captcha\r\n        const newElem = this.renderer.createElement(\"div\");\r\n        newElem.id = this.captchaElemId;\r\n        this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);\r\n        // when use captcha in cdk stepper then throwing error Captcha element with id 'ngx_captcha_id_XXXX' not found\r\n        // to fix it checking ensureCaptchaElem in timeout so that its check in next call and its able to find element\r\n        setTimeout(() => {\r\n            // update captcha elem\r\n            if (this.captchaElemId) {\r\n                this.ensureCaptchaElem(this.captchaElemId);\r\n            }\r\n        }, 0);\r\n    }\r\n    /**\r\n     * To be aligned with the ControlValueAccessor interface we need to implement this method\r\n     * However as we don't want to update the recaptcha, this doesn't need to be implemented\r\n     */\r\n    writeValue(obj) { }\r\n    /**\r\n     * This method helps us tie together recaptcha and our formControl values\r\n     */\r\n    registerOnChange(fn) {\r\n        this.onChange = fn;\r\n    }\r\n    /**\r\n     * At some point we might be interested whether the user has touched our component\r\n     */\r\n    registerOnTouched(fn) {\r\n        this.onTouched = fn;\r\n    }\r\n    /**\r\n     * Handles error callback\r\n     */\r\n    handleErrorCallback() {\r\n        this.zone.run(() => {\r\n            this.onChange(undefined);\r\n            this.onTouched(undefined);\r\n        });\r\n        this.error.next();\r\n    }\r\n    /**\r\n     * Handles expired callback\r\n     */\r\n    handleExpireCallback() {\r\n        this.expire.next();\r\n        // reset captcha on expire callback\r\n        this.resetCaptcha();\r\n    }\r\n}\r\n/** @nocollapse */ BaseReCaptchaComponentDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: BaseReCaptchaComponentDirective, deps: [{ token: i0.Renderer2 }, { token: i0.NgZone }, { token: i0.Injector }, { token: ScriptService }], target: i0.ɵɵFactoryTarget.Directive });\r\n/** @nocollapse */ BaseReCaptchaComponentDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.4\", type: BaseReCaptchaComponentDirective, inputs: { siteKey: \"siteKey\", useGlobalDomain: \"useGlobalDomain\", useEnterprise: \"useEnterprise\", type: \"type\", hl: \"hl\", tabIndex: \"tabIndex\" }, outputs: { success: \"success\", load: \"load\", reset: \"reset\", ready: \"ready\", error: \"error\", expire: \"expire\" }, usesOnChanges: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: BaseReCaptchaComponentDirective, decorators: [{\r\n            type: Directive\r\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.NgZone }, { type: i0.Injector }, { type: ScriptService }]; }, propDecorators: { siteKey: [{\r\n                type: Input\r\n            }], useGlobalDomain: [{\r\n                type: Input\r\n            }], useEnterprise: [{\r\n                type: Input\r\n            }], type: [{\r\n                type: Input\r\n            }], hl: [{\r\n                type: Input\r\n            }], tabIndex: [{\r\n                type: Input\r\n            }], success: [{\r\n                type: Output\r\n            }], load: [{\r\n                type: Output\r\n            }], reset: [{\r\n                type: Output\r\n            }], ready: [{\r\n                type: Output\r\n            }], error: [{\r\n                type: Output\r\n            }], expire: [{\r\n                type: Output\r\n            }] } });\n\nvar ReCaptchaType;\r\n(function (ReCaptchaType) {\r\n    ReCaptchaType[ReCaptchaType[\"InvisibleReCaptcha\"] = 0] = \"InvisibleReCaptcha\";\r\n    ReCaptchaType[ReCaptchaType[\"ReCaptcha2\"] = 1] = \"ReCaptcha2\";\r\n})(ReCaptchaType || (ReCaptchaType = {}));\n\nclass InvisibleReCaptchaComponent extends BaseReCaptchaComponentDirective {\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        super(renderer, zone, injector, scriptService);\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n         * This size representing invisible captcha\r\n         */\r\n        this.size = 'invisible';\r\n        /**\r\n         * Theme\r\n         */\r\n        this.theme = 'light';\r\n        /**\r\n         * Badge\r\n         */\r\n        this.badge = 'bottomright';\r\n        this.recaptchaType = ReCaptchaType.InvisibleReCaptcha;\r\n    }\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n    }\r\n    /**\r\n     * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\r\n     */\r\n    execute() {\r\n        // execute captcha\r\n        this.zone.runOutsideAngular(() => this.reCaptchaApi.execute(this.captchaId));\r\n    }\r\n    captchaSpecificSetup() {\r\n    }\r\n    /**\r\n    * Gets reCaptcha properties\r\n    */\r\n    getCaptchaProperties() {\r\n        return {\r\n            'sitekey': this.siteKey,\r\n            'callback': (response) => this.zone.run(() => this.handleCallback(response)),\r\n            'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\r\n            'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\r\n            'badge': this.badge,\r\n            'type': this.type,\r\n            'tabindex': this.tabIndex,\r\n            'size': this.size,\r\n            'theme': this.theme\r\n        };\r\n    }\r\n}\r\n/** @nocollapse */ InvisibleReCaptchaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: InvisibleReCaptchaComponent, deps: [{ token: i0.Renderer2 }, { token: i0.NgZone }, { token: i0.Injector }, { token: ScriptService }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ InvisibleReCaptchaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.4\", type: InvisibleReCaptchaComponent, selector: \"ngx-invisible-recaptcha\", inputs: { theme: \"theme\", badge: \"badge\" }, providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef((() => InvisibleReCaptchaComponent)),\r\n            multi: true,\r\n        }\r\n    ], viewQueries: [{ propertyName: \"captchaWrapperElem\", first: true, predicate: [\"captchaWrapperElem\"], descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `\r\n  <div #captchaWrapperElem></div>`, isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: InvisibleReCaptchaComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-invisible-recaptcha',\r\n                    template: `\r\n  <div #captchaWrapperElem></div>`,\r\n                    providers: [\r\n                        {\r\n                            provide: NG_VALUE_ACCESSOR,\r\n                            useExisting: forwardRef((() => InvisibleReCaptchaComponent)),\r\n                            multi: true,\r\n                        }\r\n                    ]\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.NgZone }, { type: i0.Injector }, { type: ScriptService }]; }, propDecorators: { theme: [{\r\n                type: Input\r\n            }], badge: [{\r\n                type: Input\r\n            }], captchaWrapperElem: [{\r\n                type: ViewChild,\r\n                args: ['captchaWrapperElem', { static: false }]\r\n            }] } });\n\nclass ReCaptcha2Component extends BaseReCaptchaComponentDirective {\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        super(renderer, zone, injector, scriptService);\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n        * Name of the global expire callback\r\n        */\r\n        this.windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\r\n        /**\r\n        * Name of the global error callback\r\n        */\r\n        this.windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\r\n        /**\r\n         * Theme\r\n         */\r\n        this.theme = 'light';\r\n        /**\r\n        * Size\r\n        */\r\n        this.size = 'normal';\r\n        this.recaptchaType = ReCaptchaType.ReCaptcha2;\r\n    }\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n    }\r\n    ngOnDestroy() {\r\n        window[this.windowOnErrorCallbackProperty] = {};\r\n        window[this.windowOnExpireCallbackProperty] = {};\r\n    }\r\n    captchaSpecificSetup() {\r\n        this.registerCallbacks();\r\n    }\r\n    /**\r\n     * Gets reCaptcha properties\r\n    */\r\n    getCaptchaProperties() {\r\n        return {\r\n            'sitekey': this.siteKey,\r\n            'callback': (response) => this.zone.run(() => this.handleCallback(response)),\r\n            'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\r\n            'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\r\n            'theme': this.theme,\r\n            'type': this.type,\r\n            'size': this.size,\r\n            'tabindex': this.tabIndex\r\n        };\r\n    }\r\n    /**\r\n     * Registers global callbacks\r\n    */\r\n    registerCallbacks() {\r\n        window[this.windowOnErrorCallbackProperty] = super.handleErrorCallback.bind(this);\r\n        window[this.windowOnExpireCallbackProperty] = super.handleExpireCallback.bind(this);\r\n    }\r\n}\r\n/** @nocollapse */ ReCaptcha2Component.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ReCaptcha2Component, deps: [{ token: i0.Renderer2 }, { token: i0.NgZone }, { token: i0.Injector }, { token: ScriptService }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ ReCaptcha2Component.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.4\", type: ReCaptcha2Component, selector: \"ngx-recaptcha2\", inputs: { theme: \"theme\", size: \"size\" }, providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef((() => ReCaptcha2Component)),\r\n            multi: true,\r\n        }\r\n    ], viewQueries: [{ propertyName: \"captchaWrapperElem\", first: true, predicate: [\"captchaWrapperElem\"], descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `\r\n  <div #captchaWrapperElem></div>`, isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ReCaptcha2Component, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-recaptcha2',\r\n                    template: `\r\n  <div #captchaWrapperElem></div>`,\r\n                    providers: [\r\n                        {\r\n                            provide: NG_VALUE_ACCESSOR,\r\n                            useExisting: forwardRef((() => ReCaptcha2Component)),\r\n                            multi: true,\r\n                        }\r\n                    ]\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.NgZone }, { type: i0.Injector }, { type: ScriptService }]; }, propDecorators: { theme: [{\r\n                type: Input\r\n            }], size: [{\r\n                type: Input\r\n            }], captchaWrapperElem: [{\r\n                type: ViewChild,\r\n                args: ['captchaWrapperElem', { static: false }]\r\n            }] } });\n\nclass ReCaptchaV3Service {\r\n    constructor(scriptService, zone) {\r\n        this.scriptService = scriptService;\r\n        this.zone = zone;\r\n    }\r\n    /**\r\n     * Executes reCaptcha v3/Enterprise with given action and passes token via callback. You need to verify\r\n     * this callback in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     * For enterprise see https://cloud.google.com/recaptcha-enterprise/docs\r\n     *\r\n     * @param siteKey Site key found in your google admin panel\r\n     * @param action Action to log\r\n     * @param callback Callback function to to handle token\r\n     * @param config Optional configuration like useGlobalDomain to be provided\r\n     * @param errorCallback Optional Callback function to handle errors\r\n     */\r\n    execute(siteKey, action, callback, config, errorCallback) {\r\n        this.executeAsPromise(siteKey, action, config)\r\n            .then(callback)\r\n            .catch((error) => errorCallback ? errorCallback(error) : console.error(error));\r\n    }\r\n    /**\r\n     * Executes reCaptcha v3/Enterprise with given action and returns token via Promise. You need to verify\r\n     * this token in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     * For enterprise see https://cloud.google.com/recaptcha-enterprise/docs\r\n     *\r\n     * @param siteKey Site key found in your google admin panel\r\n     * @param action Action to log\r\n     * @param config Optional configuration like useGlobalDomain to be provided\r\n     */\r\n    executeAsPromise(siteKey, action, config) {\r\n        return new Promise((resolve, reject) => {\r\n            const configuration = config || {};\r\n            const onRegister = (grecaptcha) => {\r\n                this.zone.runOutsideAngular(() => {\r\n                    try {\r\n                        grecaptcha\r\n                            .execute(siteKey, { action })\r\n                            .then((token) => this.zone.run(() => resolve(token)));\r\n                    }\r\n                    catch (error) {\r\n                        reject(error);\r\n                    }\r\n                });\r\n            };\r\n            this.scriptService.registerCaptchaScript(configuration, siteKey, onRegister);\r\n        });\r\n    }\r\n}\r\n/** @nocollapse */ ReCaptchaV3Service.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ReCaptchaV3Service, deps: [{ token: ScriptService }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\r\n/** @nocollapse */ ReCaptchaV3Service.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ReCaptchaV3Service, providedIn: \"root\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ReCaptchaV3Service, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: \"root\",\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: ScriptService }, { type: i0.NgZone }]; } });\n\nclass NgxCaptchaModule {\r\n}\r\n/** @nocollapse */ NgxCaptchaModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NgxCaptchaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ NgxCaptchaModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.4\", ngImport: i0, type: NgxCaptchaModule, declarations: [ReCaptcha2Component,\r\n        InvisibleReCaptchaComponent], imports: [CommonModule], exports: [ReCaptcha2Component,\r\n        InvisibleReCaptchaComponent] });\r\n/** @nocollapse */ NgxCaptchaModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NgxCaptchaModule, providers: [\r\n        ScriptService,\r\n        ReCaptchaV3Service\r\n    ], imports: [CommonModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NgxCaptchaModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [\r\n                        CommonModule\r\n                    ],\r\n                    declarations: [\r\n                        ReCaptcha2Component,\r\n                        InvisibleReCaptchaComponent\r\n                    ],\r\n                    providers: [\r\n                        ScriptService,\r\n                        ReCaptchaV3Service\r\n                    ],\r\n                    exports: [\r\n                        ReCaptcha2Component,\r\n                        InvisibleReCaptchaComponent\r\n                    ]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { BaseReCaptchaComponentDirective, InvisibleReCaptchaComponent, NgxCaptchaModule, ReCaptcha2Component, ReCaptchaType, ReCaptchaV3Service, ScriptService };\n"],"names":["animate","style","transition","trigger","fadeInUpAnimation","duration","transform","opacity","fadeInUp400ms","RouterModule","QuicklinkModule","ForgotPasswordComponent","routes","path","component","ForgotPasswordRoutingModule","forChild","imports","i1","exports","Validators","faArrowLeft","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelementContainerStart","ɵɵelement","ɵɵtemplate","ForgotPasswordComponent_ng_container_5_mat_error_14_Template","ɵɵlistener","ForgotPasswordComponent_ng_container_5_Template_button_click_18_listener","$event","ɵɵrestoreView","_r6","ctx_r5","ɵɵnextContext","ɵɵresetView","send","ɵɵelementContainerEnd","ɵɵadvance","ɵɵproperty","ctx_r0","imageUrl","ɵɵsanitizeUrl","form","get","hasError","aFormGroup","siteKey","ctx_r2","constructor","router","fb","formBuilder","icon","passwordSent","buttonText","group","email","required","ngOnInit","recaptcha","event","preventDefault","ɵɵdirectiveInject","Router","i2","UntypedFormBuilder","FormBuilder","selectors","decls","vars","consts","template","ForgotPasswordComponent_Template","rf","ctx","ForgotPasswordComponent_ng_container_5_Template","ForgotPasswordComponent_ng_template_6_Template","ɵɵtemplateRefExtractor","_r1","CommonModule","ReactiveFormsModule","FormsModule","MatInputModule","MatButtonModule","MatIconModule","FontAwesomeModule","NgxCaptchaModule","ForgotPasswordModule","declarations","Injectable","EventEmitter","InjectFlags","Directive","Input","Output","forwardRef","Component","ViewChild","NgModule","NgControl","NG_VALUE_ACCESSOR","_c0","ScriptService","zone","scriptElemId","windowGrecaptcha","windowGrecaptchaEnterprise","windowOnLoadCallbackProperty","windowOnLoadEnterpriseCallbackProperty","globalDomain","defaultDomain","enterpriseApi","defaultApi","registerCaptchaScript","config","render","onLoad","language","grecaptchaScriptLoaded","useEnterprise","run","window","getCallbackName","bind","scriptElem","document","createElement","id","innerHTML","src","getCaptchaScriptUrl","async","defer","getElementsByTagName","appendChild","cleanup","elem","getElementById","remove","undefined","execute","getLanguageParam","hl","domain","useGlobalDomain","api","callback","ɵfac","ScriptService_Factory","t","ɵɵinject","NgZone","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","BaseReCaptchaComponentDirective","renderer","injector","scriptService","captchaElemPrefix","setupCaptcha","tabIndex","success","load","reset","ready","error","expire","setupAfterLoad","resetCaptchaAfterSuccess","onChange","val","onTouched","isLoaded","ngAfterViewInit","control","Optional","ngAfterViewChecked","setupComponent","ngOnChanges","changes","firstChange","currentValue","previousValue","getResponse","reCaptchaApi","captchaId","getCaptchaId","resetCaptcha","next","getCurrentResponse","currentResponse","reloadCaptcha","ensureCaptchaElem","captchaElemId","captchaElem","Error","renderReCaptcha","runOutsideAngular","setTimeout","getCaptchaProperties","handleCallback","getPseudoUniqueNumber","Date","getUTCMilliseconds","Math","floor","random","captchaSpecificSetup","createAndSetCaptchaElem","grecaptcha","onloadCallback","grecapcha","generateNewElemId","captchaWrapperElem","nativeElement","newElem","writeValue","obj","registerOnChange","fn","registerOnTouched","handleErrorCallback","handleExpireCallback","BaseReCaptchaComponentDirective_Factory","Renderer2","Injector","ɵdir","ɵɵdefineDirective","inputs","outputs","features","ɵɵNgOnChangesFeature","ReCaptchaType","InvisibleReCaptchaComponent","size","theme","badge","recaptchaType","InvisibleReCaptcha","response","expired-callback","error-callback","InvisibleReCaptchaComponent_Factory","ɵcmp","ɵɵdefineComponent","viewQuery","InvisibleReCaptchaComponent_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","ɵɵProvidersFeature","provide","useExisting","multi","ɵɵInheritDefinitionFeature","InvisibleReCaptchaComponent_Template","encapsulation","selector","providers","static","ReCaptcha2Component","windowOnErrorCallbackProperty","windowOnExpireCallbackProperty","ReCaptcha2","ngOnDestroy","registerCallbacks","ReCaptcha2Component_Factory","ReCaptcha2Component_Query","ReCaptcha2Component_Template","ReCaptchaV3Service","action","errorCallback","executeAsPromise","then","catch","console","Promise","resolve","reject","configuration","onRegister","ReCaptchaV3Service_Factory","NgxCaptchaModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector"],"sourceRoot":"webpack:///","x_google_ignoreList":[5]}